<?php

/**
 * @file
 * Contains moderation_state_buttons_widget.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\moderation_state_buttons_widget\Form\ModerationStateSelectionForm;

/**
 * Implements hook_help().
 */
function moderation_state_buttons_widget_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the moderation_state_buttons_widget module.
    case 'help.page.moderation_state_buttons_widget':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a widget for moderation states that shows them as buttons.&quot;') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function moderation_state_buttons_widget_theme() {
  return [
    'moderation_state_buttons_widget' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function moderation_state_buttons_widget_entity_extra_field_info() {
  /** @var \Drupal\moderation_state_buttons_widget\ModerationStateButtonsWidgetInfoInterface $infoService */
  $infoService = \Drupal::service('moderation_state_buttons_widget.info');
  $extra = [];

  foreach ($infoService->getAllBundlesThatCanBeModerated() as $entityTypeId => $info) {
    foreach ($info['bundles'] as $bundleId => $bundleInfo) {
      $extra[$entityTypeId][$bundleId]['display']['moderation_state_buttons_widget'] = [
        'label' => new TranslatableMarkup('Moderation state selection'),
        'description' => new TranslatableMarkup('A widget for changing the moderation state.'),
        'weight' => -10,
        'visible' => FALSE,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function moderation_state_buttons_widget_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('moderation_state_buttons_widget')) {
    assert($entity instanceof ContentEntityInterface);
    $form_class = ModerationStateSelectionForm::class;
    $build['moderation_state_buttons_widget'] = \Drupal::formBuilder()->getForm($form_class, $entity);
  }
}
